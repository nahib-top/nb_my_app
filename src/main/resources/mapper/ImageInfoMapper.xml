<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<!--
      mapper为映射的根节点，用来管理DAO接口
      namespace指定DAO接口的完整类名，表示mapper配置文件管理哪个DAO接口(包.接口名)
      mybatis会依据这个接口动态创建一个实现类去实现这个接口，而这个实现类是一个Mapper对象
   -->
<mapper namespace="com.nb.my_app.mapper.ImageInfoMapper">
    <!--
          id = "接口中的方法名"
          parameterType = "接口中传入方法的参数类型"
          resultType = "返回实体类对象：包.类名"  处理结果集 自动封装
          注意:sql语句后不要出现";"号
              查询：select标签
              增加：insert标签
              修改：update标签
              删除：delete标签
      -->
    <resultMap id="ImageInfoResultMap" type="com.nb.my_app.entity.ImageInfo">
        <id property="imageId" column="image_id"/>
        <result property="imageName" column="image_name"/>
        <result property="imagePath" column="image_path"/>
    </resultMap>

    <!--插入图片中的信息-->
    <insert id="insertImageInfo" parameterType="com.nb.my_app.entity.ImageInfo">
        INSERT INTO image_info (image_id, image_name, image_path)
        VALUES (#{imageId}, #{imageName}, #{imagePath})
    </insert>

    <!--根据ID查询图片信息-->
    <select id="selectImageInfoById" parameterType="int" resultMap="ImageInfoResultMap">
        SELECT image_id, image_name, image_path
        FROM image_info
        WHERE image_id = #{id}
    </select>

<!--    更新图片信息-->
    <update id="updateImageInfo" parameterType="com.nb.my_app.entity.ImageInfo">
        UPDATE image_info
        SET image_name = #{imageName},
            image_path = #{imagePath}
        WHERE image_id = #{imageId}
    </update>

<!--    删除图片信息-->
    <delete id="deleteImageInfo" parameterType="int">
        DELETE
        FROM image_info
        WHERE image_id = #{id}
    </delete>

<!--    查询所有图片信息-->
    <select id="selectAllImageInfo" resultMap="ImageInfoResultMap">
        SELECT image_id,image_name,image_path
        FROM image_info
    </select>
</mapper>